Classes - Blueprint of objects, provides an infrastructure to the object
       - Contains variable declarations and method definitions
            -> Variable Declarations - Variable describes the attributes
                                     - Variable may be instance variables or static variables or final variables
                                        -> Local variable - Created inside a method definition
                                        -> Instance variable - Created outside a method , but inside a class
                                        -> Static variable -
            -> Method definitions - Methods handle the behaviour
                                  - May be instance methods or static methods

Constructor - While designing a class , the class designer can define within the class, a special method
              called 'constructor'.
            - Automatically invoked whenever an object of the class is created
            - Rules to define constructor :
                -> Constructor has the same name as the class name
                -> Should not have a return type
                -> Can be defined with any access specifier
                -> A class can contain more than one constructor , so it can be overloaded.

Access Modifier - keyword in OOPS to specify how accessible a class,method or other members of a class is.
                - Types:
                    -> Private - Within classes
                    -> Default(no keyword) - Within package
                    -> Protected - Within package and by subclasses of other packages.
                    -> Public - Anywhere

OOPS concepts - Polymorphism
                    -> Polymorphism in Java is a key concept of object-oriented programming that
                        allows objects to take on many forms.
                    -> It enables you to write code that can work with objects of different types in
                        a uniform way
                    -> Two types
                       - Compile time polymorphism
                            -> Method overloading
                       - Run time polymorphism
                            -> Method overriding

              - Encapsulation
                    -> Java Encapsulation is a way of hiding the implementation details of a class from
                        outside access and only exposing a public interface that can be used to interact
                        with the class.
                    -> In Java, encapsulation is achieved by declaring the instance variables of a
                        class as private, which means they can only be accessed within the class.
                    -> To allow outside access to the instance variables, public methods called
                        getters and setters are defined, which are used to retrieve and modify the
                        values of the instance variables, respectively.
                    -> By using getters and setters, the class can enforce its own data validation
                        rules and ensure that its internal state remains consistent.

              - Abstraction
                    -> Data abstraction is the process of hiding certain details and showing only
                        essential information to the user.
                    -> Two methods to achieve abstraction
                        - Interface
                        - Abstract Class

              - Inheritance
                    -> In Java, Inheritance means creating new classes based on existing ones.
                    -> A class that inherits from another class can reuse the methods and fields of
                        that class.
                    -> In addition, you can add new fields and methods to your current class as well.
